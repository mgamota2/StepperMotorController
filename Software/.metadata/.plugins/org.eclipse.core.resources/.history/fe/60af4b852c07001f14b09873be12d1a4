/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "usbd_cdc_if.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */
const uint16_t DUTY_CYCLE=1800;
uint8_t phase=1;
int32_t position = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void set_pwm(uint8_t coil, uint8_t channel, uint16_t duty_cycle);
void user_pwm_init();
void stop_motor();
void set_phase(uint8_t this_phase);
void fs_right();
void fs_left();
void fs_right_deg(uint16_t degrees);
void fs_left_deg(uint16_t degrees);
void zero_pos();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USB_DEVICE_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  vcp_init();
  int len=0;
  uint8_t buf[10];
  uint8_t doneLeft[1]={"L"};
  uint8_t doneRight[1]={"R"};
  uint8_t error[1]={"E"};
  uint8_t stop[1]={"S"};
  uint8_t zero[1]={"Z"};



  user_pwm_init();
  stop_motor();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  // VCP demonstration - Echo all data received over VCP back to the host

	  fs_left_deg(180);
	  HAL_Delay(1000);
	  fs_right_deg(180);
	  HAL_Delay(1000);
//	  len = 0;
//	  buf[0]=0;
//	  while (len==0){
//		len = vcp_recv (buf, 3);  // Read up to 1000 bytes
//		if (buf[0]==0){
// 	  		stop_motor();
//	 		len = vcp_send (stop, sizeof(uint8_t));
//			break;
//		}
//		else if (buf[0]==1){
//	  		uint16_t rotate = 0x0000 | ((buf[1] << 8) | buf[2]);
//	  		fs_left_deg(rotate);
//	  		len = vcp_send (doneLeft, sizeof(uint8_t));
//	  		break;
//	  	}
//	  	else if (buf[0]==2){
//	  		uint16_t rotate = 0x0000 | ((buf[1] << 8) | buf[2]);
//	  		fs_right_deg(rotate);
//	  		len = vcp_send (doneRight, sizeof(uint8_t));
//	  		break;
//	  	}
//
//	  	else if (buf[0]==3){
//	  	  	zero_pos();
//	  		len = vcp_send (zero, sizeof(uint8_t));
//	  	  	break;
//	  	}
//
//	  	else{
//	  		 len = vcp_send (error, sizeof(uint8_t));
//	  		 break;
//
//	  	}
//	  	break;
//	  }
//
//  	  HAL_Delay(100);


    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 2600;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2600;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void set_pwm(uint8_t coil, uint8_t channel, uint16_t duty_cycle){
	if (coil==1 && channel==1){
		TIM3->CCR1=duty_cycle;
	}
	else if (coil==1 && channel==2){
		TIM3->CCR2=duty_cycle;
	}
	else if (coil==1 && channel==3){
		TIM3->CCR3=duty_cycle;
	}
	else if (coil==1 && channel==4){
		TIM3->CCR4=duty_cycle;
	}
	else if (coil==2 && channel==1){
		TIM2->CCR1=duty_cycle;
	}
	else if (coil==2 && channel==2){
		TIM2->CCR2=duty_cycle;
	}
	else if (coil==2 && channel==3){
		TIM2->CCR3=duty_cycle;
	}
	else if (coil==2 && channel==4){
		TIM2->CCR4=duty_cycle;
	}

}
//Start timers for all channels
void user_pwm_init(){
	//Coil A
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	//Coil B
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
}
//Set all duty cycles to 0
void stop_motor(){
	for (uint8_t coil=2;coil>0;coil--){
		  for (uint8_t ch=4;ch>0;ch--){
			  set_pwm(coil, ch, 0);
		 }
	}
}

void set_phase(uint8_t this_phase){
	stop_motor();
	if (this_phase==1){
		set_pwm(1, 1, DUTY_CYCLE);
		set_pwm(1, 4, DUTY_CYCLE);
		set_pwm(2, 1, DUTY_CYCLE);
		set_pwm(2, 4, DUTY_CYCLE);
	}
	else if (this_phase==2){
		set_pwm(1, 2, DUTY_CYCLE);
		set_pwm(1, 3, DUTY_CYCLE);
		set_pwm(2, 1, DUTY_CYCLE);
		set_pwm(2, 4, DUTY_CYCLE);
	}
	else if(this_phase==3){
		set_pwm(1, 2, DUTY_CYCLE);
		set_pwm(1, 3, DUTY_CYCLE);
		set_pwm(2, 2, DUTY_CYCLE);
		set_pwm(2, 3, DUTY_CYCLE);
	}
	else if (this_phase==4){
		set_pwm(1, 1, DUTY_CYCLE);
		set_pwm(1, 4, DUTY_CYCLE);
		set_pwm(2, 2, DUTY_CYCLE);
		set_pwm(2, 3, DUTY_CYCLE);
	}
	phase=this_phase;
}

//Turn motor right (A1,A4)(B1, B4) -> (A2,A3)(B1, B4) -> (A2,A3)(B2, B3) -> (A1,A4)(B2, B3)
void fs_right(){
	for (int i=4; i>0; i--){
		phase=phase%4;
		set_phase(++phase); //Increment phase

		//Hardware delay 8 MHz=0.12 uS per tick, 4300 ticks = 516us
		for (volatile uint32_t i =0; i<3000;i++);
	}
}
//Turn motor left (A1,A4)(B2, B3) -> (A2,A3)(B2, B3) -> (A2,A3)(B1, B4)-> (A1,A4)(B1, B4)
void fs_left(){
	for (int i=4; i>0; i--){
		if (phase<=1){
			set_phase(4); //Loop back to 4 after 1
		}
		else{
			set_phase(--phase); //Decrement phase
		}

		//Hardware delay 8 MHz=0.12 uS per tick, 4300 ticks = 516us
		for (volatile uint32_t i =0; i<3000;i++);
	}
}

void fs_right_deg(uint16_t degrees){
	uint16_t steps = (degrees/0.72); //10:1 gearbox so 0.18 degrees per step, fs_right and fs_left do 4 steps
	for (int i=steps; i>0; i--){
		fs_right();
//		for (volatile uint16_t i=0; i!=0x9C4; i++); //Hardware delay
	}
	position += degrees;
	stop_motor();

}

void fs_left_deg(uint16_t degrees){
	uint16_t steps = (degrees/0.72); //10:1 gearbox so 0.18 degrees per step, fs_right and fs_left do 4 steps
	for (int i=steps; i>0; i--){
		fs_left();
//		for (volatile uint16_t i=0; i!=0x9C4; i++); //Hardware delay
	}
	position -= degrees;
	stop_motor();

}

void zero_pos(){
	if (position>0){
		fs_left_deg(position);
	}
	else if (position<0){
		fs_right_deg(-1*position);
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
